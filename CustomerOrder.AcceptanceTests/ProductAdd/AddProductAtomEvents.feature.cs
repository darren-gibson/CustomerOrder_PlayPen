// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.18444
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace CustomerOrder.AcceptanceTests.ProductAdd
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Add Product Atom Events")]
    public partial class AddProductAtomEventsFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "AddProductAtomEvents.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Add Product Atom Events", "In order to sell products, they need to be added to the order.\r\nAs a Customer\r\nI " +
                    "want to Add a Produt to my Order \r\nSo that I can purchase it", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 7
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Product Id",
                        "Unit Price",
                        "Sell by UOM",
                        "Friendly Name"});
            table1.AddRow(new string[] {
                        "trn:tesco:product:uuid:1b4b0931-5854-489b-a77c-0cebd15d554c",
                        "1.00 GBP",
                        "Each",
                        "Can of Soup"});
#line 8
 testRunner.Given("the following products are know to the Price Service:", ((string)(null)), table1, "Given ");
#line 11
 testRunner.And("I have a unique order number {orderNo}", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("There are initially zero events")]
        [NUnit.Framework.CategoryAttribute("addProduct")]
        [NUnit.Framework.CategoryAttribute("productAdded")]
        public virtual void ThereAreInitiallyZeroEvents()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("There are initially zero events", new string[] {
                        "addProduct",
                        "productAdded"});
#line 14
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 15
 testRunner.When("I GET /orders/{orderNo}/events/productAdded with an Accept header of application/" +
                    "atom+xml", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 16
 testRunner.Then("the result should be an HTTP 200 OK Status", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 17
 testRunner.And("the result should contain no events", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Successfully adding a product to an order generates a productAdded event")]
        [NUnit.Framework.CategoryAttribute("addProduct")]
        [NUnit.Framework.CategoryAttribute("productAdded")]
        public virtual void SuccessfullyAddingAProductToAnOrderGeneratesAProductAddedEvent()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Successfully adding a product to an order generates a productAdded event", new string[] {
                        "addProduct",
                        "productAdded"});
#line 20
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 21
 testRunner.Given("I add a Product to a new order by calling POST /orders/{orderNo}/productadd with " +
                    "a ProductID of \"trn:tesco:product:uuid:1b4b0931-5854-489b-a77c-0cebd15d554c\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 22
 testRunner.When("I GET /orders/{orderNo}/events/productAdded with an Accept header of application/" +
                    "atom+xml", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 23
 testRunner.Then("the result should be an HTTP 200 OK Status", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Value"});
            table2.AddRow(new string[] {
                        "product",
                        "trn:tesco:product:uuid:1b4b0931-5854-489b-a77c-0cebd15d554c"});
            table2.AddRow(new string[] {
                        "order",
                        "{orderNo}"});
            table2.AddRow(new string[] {
                        "quantity",
                        "1 Each"});
#line 24
 testRunner.And("the result should contain:", ((string)(null)), table2, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("productAdded events include a unit price and net price")]
        [NUnit.Framework.CategoryAttribute("addProduct")]
        [NUnit.Framework.CategoryAttribute("productAdded")]
        [NUnit.Framework.CategoryAttribute("unitPrice")]
        [NUnit.Framework.CategoryAttribute("netPrice")]
        public virtual void ProductAddedEventsIncludeAUnitPriceAndNetPrice()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("productAdded events include a unit price and net price", new string[] {
                        "addProduct",
                        "productAdded",
                        "unitPrice",
                        "netPrice"});
#line 31
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 32
 testRunner.Given("I add a Product to a new order by calling POST /orders/{orderNo}/productadd with " +
                    "a ProductID of \"trn:tesco:product:uuid:1b4b0931-5854-489b-a77c-0cebd15d554c\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 33
 testRunner.When("I GET /orders/{orderNo}/events/productAdded with an Accept header of application/" +
                    "atom+xml", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 34
 testRunner.Then("the result should be an HTTP 200 OK Status", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Value"});
            table3.AddRow(new string[] {
                        "unitPrice",
                        "1.00 GBP"});
            table3.AddRow(new string[] {
                        "netPrice",
                        "1.00 GBP"});
#line 35
 testRunner.And("the result should contain:", ((string)(null)), table3, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("adding a product with a quantity of 3 changes the quantity and the Net Price")]
        [NUnit.Framework.CategoryAttribute("addProduct")]
        [NUnit.Framework.CategoryAttribute("productAdded")]
        public virtual void AddingAProductWithAQuantityOf3ChangesTheQuantityAndTheNetPrice()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("adding a product with a quantity of 3 changes the quantity and the Net Price", new string[] {
                        "addProduct",
                        "productAdded"});
#line 41
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 42
 testRunner.Given("I add a Product to a new order by calling POST /orders/{orderNo}/productadd with " +
                    "a ProductID of \"trn:tesco:product:uuid:1b4b0931-5854-489b-a77c-0cebd15d554c\" and" +
                    " a Quantity of 3 Each", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 43
 testRunner.When("I GET /orders/{orderNo}/events/productAdded with an Accept header of application/" +
                    "atom+xml", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 44
 testRunner.Then("the result should be an HTTP 200 OK Status", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Value"});
            table4.AddRow(new string[] {
                        "unitPrice",
                        "1.00 GBP"});
            table4.AddRow(new string[] {
                        "netPrice",
                        "3.00 GBP"});
#line 45
 testRunner.And("the result should contain:", ((string)(null)), table4, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("the Id in the productAdded event is stable")]
        [NUnit.Framework.CategoryAttribute("addProduct")]
        [NUnit.Framework.CategoryAttribute("productAdded")]
        [NUnit.Framework.CategoryAttribute("eventId")]
        public virtual void TheIdInTheProductAddedEventIsStable()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("the Id in the productAdded event is stable", new string[] {
                        "addProduct",
                        "productAdded",
                        "eventId"});
#line 51
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 52
 testRunner.Given("I add a Product to a new order by calling POST /orders/{orderNo}/productadd with " +
                    "a ProductID of \"trn:tesco:product:uuid:1b4b0931-5854-489b-a77c-0cebd15d554c\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 53
 testRunner.When("I GET /orders/{orderNo}/events/productAdded with an Accept header of application/" +
                    "atom+xml", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 54
 testRunner.And("I save the Id of the productAdded event", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 55
 testRunner.And("I GET /orders/{orderNo}/events/productAdded with an Accept header of application/" +
                    "atom+xml", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 56
 testRunner.Then("the saved Id should equal the Id in the productAdded event just received", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
