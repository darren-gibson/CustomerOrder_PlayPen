// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.18444
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace CustomerOrder.AcceptanceTests.Order
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Get Order")]
    public partial class GetOrderFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "GetOrder.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Get Order", "In order for the customer to pay for the products in their order, they need to se" +
                    "e what\'s in it and the outstanding balance.\r\nAs a Customer\r\nI want to see my ord" +
                    "er\r\nSo that I can ensure it is correct", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 7
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Product Id",
                        "Unit Price",
                        "Sell by UOM",
                        "Friendly Name"});
            table1.AddRow(new string[] {
                        "5000157024671",
                        "0.68 GBP",
                        "Each",
                        "Heinz Baked Beans In Tomato Sauce 415G"});
            table1.AddRow(new string[] {
                        "5053947861260",
                        "3.29 GBP",
                        "Each",
                        "Tesco Finest British 6 Lincolnshire Sausages 400G"});
#line 8
 testRunner.Given("the following products are know to the Price Service:", ((string)(null)), table1, "Given ");
#line 12
 testRunner.And("I have a unique order number {orderNo}", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Getting an order with a product in it")]
        [NUnit.Framework.CategoryAttribute("addProduct")]
        public virtual void GettingAnOrderWithAProductInIt()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Getting an order with a product in it", new string[] {
                        "addProduct"});
#line 15
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 16
 testRunner.When("I add a Product to the order by calling POST /orders/{orderNo}/productadd with a " +
                    "ProductID of \"5053947861260\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 17
 testRunner.When("I GET /orders/{orderNo} with an accept header of application/json", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 18
 testRunner.Then("the result should be an HTTP 200 OK Status", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Product",
                        "Quantity"});
            table2.AddRow(new string[] {
                        "urn:epc:id:gtin:05053947861260",
                        "1 Each"});
#line 19
 testRunner.And("the order should contain the following products:", ((string)(null)), table2, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Getting an order with multiple products in it")]
        [NUnit.Framework.CategoryAttribute("addProduct")]
        public virtual void GettingAnOrderWithMultipleProductsInIt()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Getting an order with multiple products in it", new string[] {
                        "addProduct"});
#line 24
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 25
 testRunner.When("I add a Product to the order by calling POST /orders/{orderNo}/productadd with a " +
                    "ProductID of \"5053947861260\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 26
 testRunner.And("I add a Product to the order by calling POST /orders/{orderNo}/productadd with a " +
                    "ProductID of \"5000157024671\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 27
 testRunner.When("I GET /orders/{orderNo} with an accept header of application/json", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 28
 testRunner.Then("the result should be an HTTP 200 OK Status", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Product",
                        "Quantity"});
            table3.AddRow(new string[] {
                        "urn:epc:id:gtin:05053947861260",
                        "1 Each"});
            table3.AddRow(new string[] {
                        "urn:epc:id:gtin:05000157024671",
                        "1 Each"});
#line 29
 testRunner.And("the order should contain the following products:", ((string)(null)), table3, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Getting an order with multiple products in it and different quantities")]
        [NUnit.Framework.CategoryAttribute("addProduct")]
        public virtual void GettingAnOrderWithMultipleProductsInItAndDifferentQuantities()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Getting an order with multiple products in it and different quantities", new string[] {
                        "addProduct"});
#line 35
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 36
 testRunner.When("I add a Product to the order by calling POST /orders/{orderNo}/productadd with a " +
                    "ProductID of \"5053947861260\" with a Quantity of \"2 Each\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 37
 testRunner.And("I add a Product to the order by calling POST /orders/{orderNo}/productadd with a " +
                    "ProductID of \"5000157024671\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 38
 testRunner.When("I GET /orders/{orderNo} with an accept header of application/json", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 39
 testRunner.Then("the result should be an HTTP 200 OK Status", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Product",
                        "Quantity",
                        "Unit Price",
                        "Net Price"});
            table4.AddRow(new string[] {
                        "urn:epc:id:gtin:05053947861260",
                        "2 Each",
                        "3.29 GBP",
                        "6.58 GBP"});
            table4.AddRow(new string[] {
                        "urn:epc:id:gtin:05000157024671",
                        "1 Each",
                        "0.68 GBP",
                        "0.68 GBP"});
#line 40
 testRunner.And("the order should contain the following products:", ((string)(null)), table4, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("An order is priced with a netTotal amount that tells the customer exactly how muc" +
            "h they will need to pay")]
        public virtual void AnOrderIsPricedWithANetTotalAmountThatTellsTheCustomerExactlyHowMuchTheyWillNeedToPay()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("An order is priced with a netTotal amount that tells the customer exactly how muc" +
                    "h they will need to pay", ((string[])(null)));
#line 45
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 46
 testRunner.When("I add a Product to the order by calling POST /orders/{orderNo}/productadd with a " +
                    "ProductID of \"5053947861260\" with a Quantity of \"2 Each\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 47
 testRunner.And("I add a Product to the order by calling POST /orders/{orderNo}/productadd with a " +
                    "ProductID of \"5000157024671\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 48
 testRunner.When("I GET /orders/{orderNo} with an accept header of application/json", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 49
 testRunner.Then("the result should be an HTTP 200 OK Status", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 50
 testRunner.And("the order should have a total.net of 7.26 GBP", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("The amount due for an order is reduced by the total amount paid")]
        public virtual void TheAmountDueForAnOrderIsReducedByTheTotalAmountPaid()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The amount due for an order is reduced by the total amount paid", ((string[])(null)));
#line 52
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 53
 testRunner.When("I add a Product to the order by calling POST /orders/{orderNo}/productadd with a " +
                    "ProductID of \"5053947861260\" with a Quantity of \"3 Each\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 54
 testRunner.And("I add a Product to the order by calling POST /orders/{orderNo}/productadd with a " +
                    "ProductID of \"5000157024671\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 55
 testRunner.And("I add a Payment to an order by calling PUT /orders/{orderNo}/payments with a tend" +
                    "er type of CASH and an amount of 2.25 GBP", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 56
 testRunner.When("I GET /orders/{orderNo} with an accept header of application/json", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 57
 testRunner.Then("the result should be an HTTP 200 OK Status", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 58
 testRunner.And("the order should have a total.net of 10.55 GBP", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 59
 testRunner.And("the order should have a total.paid of 2.25 GBP", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 60
 testRunner.And("the order should have a total.due of 8.30 GBP", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("When I get the order the individual payments are available in it")]
        public virtual void WhenIGetTheOrderTheIndividualPaymentsAreAvailableInIt()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("When I get the order the individual payments are available in it", ((string[])(null)));
#line 62
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 63
 testRunner.When("I add a Product to the order by calling POST /orders/{orderNo}/productadd with a " +
                    "ProductID of \"5053947861260\" with a Quantity of \"3 Each\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 64
 testRunner.And("I add a Payment to an order by calling PUT /orders/{orderNo}/payments with a tend" +
                    "er type of CASH and an amount of 2.25 GBP", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 65
 testRunner.And("I add a Payment to an order by calling PUT /orders/{orderNo}/payments with a tend" +
                    "er type of VISA and an amount of 4.00 GBP", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 66
 testRunner.When("I GET /orders/{orderNo} with an accept header of application/json", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 67
 testRunner.Then("the result should be an HTTP 200 OK Status", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Tender Type",
                        "Amount"});
            table5.AddRow(new string[] {
                        "CASH",
                        "2.25 GBP"});
            table5.AddRow(new string[] {
                        "VISA",
                        "4.00 GBP"});
#line 68
 testRunner.And("the order should contain the following payments:", ((string)(null)), table5, "And ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
